import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

X, Y = None, None
def user_file_import():
    global X, Y
    file_path = input("Enter the file path: ")
    try:
        dataframe = pd.read_csv(file_path)
        print("Columns found in file:", list(dataframe.columns))

        xvarinput = input("Enter the X variable(s), comma-separated (e.g., col1,col2): ")
        x_columns = [col.strip() for col in xvarinput.split(',')]
        yvarinput = input("What is the Y variable called? ")
        X_raw = dataframe[x_columns]
        X = pd.get_dummies(X_raw, drop_first=True).values  # Converts categorical to numeric
        Y = dataframe[yvarinput].values

        if np.isnan(X).any() or np.isnan(Y).any():
            print("NaN value found in either list. Breaking the loop.")
            quit()

    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
        quit()
    except Exception as e:
        print(f"An error occurred: {e}")

def user_list_input():
    global X, Y
    Xl = []
    Yl = []
    n = int(input("How many X/Y values?: "))
    for i in range(1, n + 1):
        print("Input X Value #", i, ":", end="")
        Xi = int(input())
        Xl.append(Xi)
    for j in range(1, n + 1):
        print("Input Y Value #", j, ":", end="")
        Yi = int(input())
        Yl.append(Yi)
    X = np.array(Xl)
    Y = np.array(Yl)
def scatterplot():
    plt.scatter(X,Y)
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.title("Scatter Plot")
    plt.show()


def simple_linear_regression_predict(X, Y):
    if X.ndim == 1:
        X = X.reshape(-1, 1)

    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.5, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")
    print(f"R-squared: {r2}")

    if X.shape[1] > 1:
        for i, coef in enumerate(model.coef_):
            print(f"Coefficient for feature {i + 1}: {coef}")
    else:
        print(f"Coefficient: {model.coef_[0]}")
    print(f"Intercept: {model.intercept_}")

    # Sort X_test and predictions for a cleaner plot
    plt.scatter(y_test, y_pred, color='purple')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
    plt.xlabel("Actual Y")
    plt.ylabel("Predicted Y")
    plt.title("Predicted vs. Actual")
    plt.grid(True)
    plt.show()

while True:
    print("Which way will you import the data? File Import or List Input?")
    try:
        datatype = int(input("File import (1), List Input (2), Same Data (3): "))
    except:
        print("Input not recognized")
        continue
    if datatype == 1:
        user_file_import()
    elif datatype == 2:
        user_list_input()
    elif datatype == 3:
        if X is None or Y is None:
            print("No data currently loaded. Please import data first.")
            continue
    else:
        print("Invalid input")
        continue
    while True:
        print("Which action would you like to complete?")
        try:
            actiontype = int(input("Scatterplot (4), LinReg (5), Exit (6): "))
        except:
            print("Input not recognized")
            continue
        if actiontype == 4:
            scatterplot()
        elif actiontype == 5:
            simple_linear_regression_predict(X,Y)
        elif actiontype == 6:
            print("Exiting program.")
            quit()
        else:
            print("Invalid input")
